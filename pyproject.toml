[tool.poetry]
name = "jira-bugzilla-integration"
version = "0.1.0"
description = "jira-bugzilla-integration"
authors = ["@mozilla/jbi-core"]
license = "MPL"

[tool.poetry.dependencies]
python = ">=3.8, <3.11"
fastapi = "^0.73.0"
pydantic = "^1.9.0"
uvicorn = {extras = ["standard"], version = "^0.17.4"}
gunicorn = "^20.1.0"
prometheus-client = "^0.13.1"
python-bugzilla = "^3.2.0"
atlassian-python-api = "^3.20.1"

[tool.poetry.dev-dependencies]
pre-commit = "^2.17.0"
black = "^22.1.0"
isort = {extras = ["pyproject"], version = "^4.3.21"}
coverage = {extras = ["toml"], version = "^5.3"}
mypy = "^0.910"
detect-secrets = "^0.14.3"
bandit = "^1.7.0"
pylint = "^2.7.2"
pylint-pytest = "^1.1.2"
pytest = "^7.0.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = [
    "tests/unit",
]

[tool.pylint]
    [tool.pylint.'MESSAGES CONTROL']
    disable = [
        "C0114", #missing-module-docstring
        "C0115", #missing-class-docstring
        "C0116", #missing-function-docstring
        "C0301", #line-too-long
        "R0903", #too-few-public-methods
        "W0613", #unused-argument
    ]
    [tool.pylint.REPORTS]
    output-format = 'colorized'
    [tool.pylint.MASTER]
    load-plugins='pylint_pytest'
    ignore='third_party'

[tool.black]
line-length = 88
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''

[tool.isort]
# https://black.readthedocs.io/en/stable/compatible_configs.html
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88


[tool.coverage]
# https://github.com/nedbat/coveragepy
    [tool.coverage.run]
    omit = [
        '*/.local/*',
        '/usr/*',
        '*/.venv/*',
        '*/.tox/*',
        '*/virtualenvs/*',
    ]

    [tool.coverage.report]

    exclude_lines = [
        "# noqa",
        "raise NotImplementedError",
        "pragma: no cover",
        "def __repr__",
        "if .debug:",
        "raise NotImplementedError",
        "if __name__ == .__main__.:",
        "logger.",
        "from",
        "import"
    ]
